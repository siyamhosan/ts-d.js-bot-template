/* eslint-disable new-cap */
import Bot from '../library/Client.js'
import chalk from 'chalk'
import { TableUserConfig, table } from 'table'
import { Event } from '../base/Event.js'
import { ClientEvents } from 'discord.js'
import { readFileSync } from 'fs'

export default async (client: Bot) => {
  const contents = [['No.', 'Name', 'Nick']]
  const config: TableUserConfig = {
    drawHorizontalLine: (lineIndex: number, rowCount: number) => {
      return lineIndex === 1 || lineIndex === 0 || lineIndex === rowCount
    },

    border: {
      topBody: chalk.gray('─'),
      topJoin: chalk.gray('┬'),
      topLeft: chalk.gray('┌'),
      topRight: chalk.gray('┐'),

      bottomBody: chalk.gray('─'),
      bottomJoin: chalk.gray('┴'),
      bottomLeft: chalk.gray('└'),
      bottomRight: chalk.gray('┘'),

      bodyLeft: chalk.gray('│'),
      bodyRight: chalk.gray('│'),
      bodyJoin: chalk.gray('│'),

      joinBody: chalk.gray('─'),
      joinLeft: chalk.gray('├'),
      joinRight: chalk.gray('┤'),
      joinJoin: chalk.gray('┼')
    }
  }

  console.info(chalk.bold('Loading Events...'), chalk.bold('evt'))
  const startLoading = Date.now()

  // old system
  //   {
  //     const dirs = await readdir('./src/main/events/')

  //     const exportedClasses = []

  //     let bundledContent = ''

  //     for (const dir of dirs) {
  //       if (dir === 'bundle') continue
  //       const files = (await readdir(`./src/main/events/${dir}/`)).filter(f =>
  //         f.endsWith('.ts')
  //       )

  //       for await (const file of files) {
  //         if (!(await stat(`src/main/events/${dir}/${file}`)).isFile()) return
  //         const eventContent = readFileSync(
  //           `./src/main/events/${dir}/${file}`,
  //           'utf-8'
  //         )
  //         const className = eventContent.match(/export\s+class\s+(\w+)/)
  //         if (className) {
  //           exportedClasses.push(className[1])
  //         }
  //         bundledContent += eventContent + '\n'
  //       }
  //     }

  //     const importRegex = /^import\s?([\w]+|\{[\s,\w]+\})\s?from\s?'[\S]+'/gm

  //     const imports = bundledContent.match(importRegex) || []

  //     const mergedImports = mergeImports(imports)

  //     const bundleWithOutImport = bundledContent.replace(importRegex, '')

  //     const formattedCode = `${mergedImports.join(
  //       '\n'
  //     )}\n\n${bundleWithOutImport}`

  //     // src\main\events\bundle\events-bundled.ts
  //     writeFileSync(
  //       './src/main/events/bundle/events-bundled.ts',
  //       `// This file is auto-generated by the eventManager.ts file.
  // // Do not edit this file manually.
  // ${formattedCode}
  // `
  //     )

  //     await exec('eslint --fix ./src/main/events/bundle/events-bundled.ts')
  //     await new Promise(resolve => setTimeout(resolve, 1000))
  //   }

  // await Compiler('events')

  const { exportedClasses } = JSON.parse(
    readFileSync('./src/main/events/bundle/events-compiled.json', 'utf-8')
  )

  if (!exportedClasses) return

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const allEvents: Record<string, any> = await import(
    '../../main/events/bundle/events-bundled.js'
  )

  let i = 1
  for (const event of exportedClasses) {
    const eventClass = allEvents[event]
    const eventInstance = new eventClass(client)

    if (eventInstance instanceof Event) {
      if (eventInstance.options.once) {
        client.once(
          eventInstance.options.name as keyof ClientEvents,
          eventInstance.run
        )
      } else {
        client.on(
          eventInstance.options.name as keyof ClientEvents,
          eventInstance.run
        )
      }
      contents.push([
        String(`${i++}.`),
        eventInstance.options.name,
        eventInstance.options.nick || '(None)'
      ])
    }
  }

  table(contents, config)
    .split('\n')
    .forEach(text => {
      console.info(text, chalk.bold('evt'))
    })
  console.trace(
    startLoading,
    chalk.bold('Loaded Events in: '),
    chalk.bold('evt')
  )
}
